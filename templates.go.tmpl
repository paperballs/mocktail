{{/* Template for generating imports */}}
{{define "imports"}}// Code generated by mocktail; DO NOT EDIT.

package {{ .Name }}

{{ if .Imports }}import (
{{- range $index, $import := .Imports }}
	{{ if $import }}"{{ $import }}"{{ else }}{{end}}
{{- end}}
){{end}}
{{end}}

{{/* Template for generating mock base struct and constructor */}}
{{define "mockBase"}}
// {{ .InterfaceName | ToGoCamel }}Mock mock of {{ .InterfaceName }}.
type {{ .InterfaceName | ToGoCamel }}Mock{{ .TypeParamsDecl }} struct { mock.Mock }

// {{.ConstructorPrefix}}{{ .InterfaceName | ToGoPascal }}Mock creates a new {{ .InterfaceName | ToGoCamel }}Mock.
func {{.ConstructorPrefix}}{{ .InterfaceName | ToGoPascal }}Mock{{ .TypeParamsDecl }}(tb testing.TB) *{{ .InterfaceName | ToGoCamel }}Mock{{ .TypeParamsUse }} {
	tb.Helper()

	m := &{{ .InterfaceName | ToGoCamel }}Mock{{ .TypeParamsUse }}{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}
{{end}}

{{/* Combined template for all Call-related functionality */}}
{{define "combinedCall"}}
type {{ .InterfaceName | ToGoCamel }}{{ .MethodName }}Call{{ .TypeParamsDecl }} struct{
	*mock.Call
	Parent *{{ .InterfaceName | ToGoCamel }}Mock{{ .TypeParamsUse }}
}


func (_c *{{ .InterfaceName | ToGoCamel }}{{ .MethodName }}Call{{ .TypeParamsUse }}) Panic(msg string) *{{ .InterfaceName | ToGoCamel }}{{ .MethodName }}Call{{ .TypeParamsUse }} {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *{{ .InterfaceName | ToGoCamel }}{{ .MethodName }}Call{{ .TypeParamsUse }}) Once() *{{ .InterfaceName | ToGoCamel }}{{ .MethodName }}Call{{ .TypeParamsUse }} {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *{{ .InterfaceName | ToGoCamel }}{{ .MethodName }}Call{{ .TypeParamsUse }}) Twice() *{{ .InterfaceName | ToGoCamel }}{{ .MethodName }}Call{{ .TypeParamsUse }} {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *{{ .InterfaceName | ToGoCamel }}{{ .MethodName }}Call{{ .TypeParamsUse }}) Times(i int) *{{ .InterfaceName | ToGoCamel }}{{ .MethodName }}Call{{ .TypeParamsUse }} {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *{{ .InterfaceName | ToGoCamel }}{{ .MethodName }}Call{{ .TypeParamsUse }}) WaitUntil(w <-chan time.Time) *{{ .InterfaceName | ToGoCamel }}{{ .MethodName }}Call{{ .TypeParamsUse }} {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *{{ .InterfaceName | ToGoCamel }}{{ .MethodName }}Call{{ .TypeParamsUse }}) After(d time.Duration) *{{ .InterfaceName | ToGoCamel }}{{ .MethodName }}Call{{ .TypeParamsUse }} {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *{{ .InterfaceName | ToGoCamel }}{{ .MethodName }}Call{{ .TypeParamsUse }}) Run(fn func(args mock.Arguments)) *{{ .InterfaceName | ToGoCamel }}{{ .MethodName }}Call{{ .TypeParamsUse }} {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *{{ .InterfaceName | ToGoCamel }}{{ .MethodName }}Call{{ .TypeParamsUse }}) Maybe() *{{ .InterfaceName | ToGoCamel }}{{ .MethodName }}Call{{ .TypeParamsUse }} {
	_c.Call = _c.Call.Maybe()
	return _c
}

{{ if .HasReturns }}
func (_c *{{ .InterfaceName | ToGoCamel }}{{ .MethodName }}Call{{ .TypeParamsUse }}) TypedReturns({{ range $i, $param := .ReturnParams }}{{ if $i }}, {{ end }}{{ $param.Name }} {{ $param.Type }}{{ end }}) *{{ .InterfaceName | ToGoCamel }}{{ .MethodName }}Call{{ .TypeParamsUse }} {
	_c.Call = _c.Return({{ range $i, $param := .ReturnParams }}{{ if $i }}, {{ end }}{{ $param.Name }}{{ end }})
	return _c
}

func (_c *{{ .InterfaceName | ToGoCamel }}{{ .MethodName }}Call{{ .TypeParamsUse }}) ReturnsFn(fn {{ .ReturnsFnSignature }}) *{{ .InterfaceName | ToGoCamel }}{{ .MethodName }}Call{{ .TypeParamsUse }} {
	_c.Call = _c.Return(fn)
	return _c
}
{{ end }}

func (_c *{{ .InterfaceName | ToGoCamel }}{{ .MethodName }}Call{{ .TypeParamsUse }}) TypedRun(fn {{ .TypedRunFnSignature }}) *{{ .InterfaceName | ToGoCamel }}{{ .MethodName }}Call{{ .TypeParamsUse }} {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
{{- range $i, $param := .InputParams }}
{{- if eq $param.Type "string" }}
		{{ $param.Name }} := args.String({{ $param.Position }})
{{- else if eq $param.Type "int" }}
		{{ $param.Name }} := args.Int({{ $param.Position }})
{{- else if eq $param.Type "bool" }}
		{{ $param.Name }} := args.Bool({{ $param.Position }})
{{- else if eq $param.Type "error" }}
		{{ $param.Name }} := args.Error({{ $param.Position }})
{{- else }}
		{{ $param.Name }}, _ := args.Get({{ $param.Position }}).({{ $param.Type }})
{{- end }}
{{- end }}
		fn({{ range $i, $param := .InputParams }}{{ if $i }}, {{ end }}{{ $param.Name }}{{ end }}{{ if .IsVariadic }}...{{ end }})
	})
	return _c
}

{{ range $method := .Methods }}
func (_c *{{ $.CallType }}) On{{ $method.Name }}({{- $first := true }}{{ range $param := $method.Params }}{{ if not $param.IsContext }}{{ if not $first }}, {{ end }}{{ $param.Name }} {{ $param.Type }}{{ $first = false }}{{ end }}{{ end }}) *{{ $.InterfaceName | ToGoCamel }}{{ $method.Name }}Call{{ $.TypeParamsUse }} {
	return _c.Parent.On{{ $method.Name }}({{- $first := true }}{{ range $param := $method.Params }}{{ if not $param.IsContext }}{{ if not $first }}, {{ end }}{{ $param.Name }}{{ $first = false }}{{ end }}{{ end }}{{ if $method.IsVariadic }}...{{ end }})
}

{{ end }}
{{ range $method := .Methods }}
func (_c *{{ $.CallType }}) On{{ $method.Name }}Raw({{- $first := true }}{{ range $param := $method.Params }}{{ if not $param.IsContext }}{{ if not $first }}, {{ end }}{{ $param.Name }} interface{}{{ $first = false }}{{ end }}{{ end }}) *{{ $.InterfaceName | ToGoCamel }}{{ $method.Name }}Call{{ $.TypeParamsUse }} {
	return _c.Parent.On{{ $method.Name }}Raw({{- $first := true }}{{ range $param := $method.Params }}{{ if not $param.IsContext }}{{ if not $first }}, {{ end }}{{ $param.Name }}{{ $first = false }}{{ end }}{{ end }})
}

{{ end }}
{{end}}

{{/* Combined template for all MockMethod-related functionality */}}
{{define "combinedMockMethod"}}
func (_m *{{ .InterfaceName | ToGoCamel }}Mock{{ .TypeParamsUse }}) {{ .MethodName }}({{ range $i, $param := .Params }}{{ if $i }}, {{ end }}{{ if $param.IsContext }}_{{ else }}{{ $param.Name }}{{ end }} {{ $param.Type }}{{ end }}) {{ if gt (len .Results) 1 }}({{ end }}{{ range $i, $result := .Results }}{{ if $i }}, {{ end }}{{ $result.Type }}{{ end }}{{ if gt (len .Results) 1 }}){{ end }} {
{{- if .Results }}
	_ret := _m.Called({{ range $i, $param := .CallArgs }}{{ if $i }}, {{ end }}{{ $param }}{{ end }})

	if _rf, ok := _ret.Get(0).({{ .FnSignature }}); ok {
		return _rf({{ range $i, $param := .CallArgs }}{{ if $i }}, {{ end }}{{ $param }}{{ end }}{{ if .IsVariadic }}...{{ end }})
	}
{{ range $i, $result := .Results }}
{{- if eq $result.Type "string" "int" "bool" "error" }}
	{{ $result.Name }} := _ret.{{ $result.Type | ToGoPascal }}({{ $i }})
{{- else }}
	{{ $result.Name }}, _ := _ret.Get({{ $i }}).({{ $result.Type }})
{{- end }}
{{- end }}

	return {{ range $i, $result := .Results }}{{ if $i }}, {{ end }}{{ $result.Name }}{{ end }}
{{- else }}
	_m.Called({{ range $i, $param := .CallArgs }}{{ if $i }}, {{ end }}{{ $param }}{{ end }})
{{- end }}
}

func (_m *{{ .InterfaceName | ToGoCamel }}Mock{{ .TypeParamsUse }}) On{{ .MethodName }}({{- $first := true }}{{ range $param := .Params }}{{ if not $param.IsContext }}{{ if not $first }}, {{ end }}{{ $param.Name }} {{ $param.Type }}{{ $first = false }}{{ end }}{{ end }}) *{{ .InterfaceName | ToGoCamel }}{{ .MethodName }}Call{{ .TypeParamsUse }} {
	return &{{ .InterfaceName | ToGoCamel }}{{ .MethodName }}Call{{ .TypeParamsUse }}{Call: _m.Mock.On("{{ .MethodName }}", {{ range $i, $param := .OnCallArgs }}{{ if $i }}, {{ end }}{{ $param }}{{ end }}), Parent: _m}
}

func (_m *{{ .InterfaceName | ToGoCamel }}Mock{{ .TypeParamsUse }}) On{{ .MethodName }}Raw({{- $first := true }}{{ range $param := .Params }}{{ if not $param.IsContext }}{{ if not $first }}, {{ end }}{{ $param.Name }} interface{}{{ $first = false }}{{ end }}{{ end }}) *{{ .InterfaceName | ToGoCamel }}{{ .MethodName }}Call{{ .TypeParamsUse }} {
	return &{{ .InterfaceName | ToGoCamel }}{{ .MethodName }}Call{{ .TypeParamsUse }}{Call: _m.Mock.On("{{ .MethodName }}", {{ range $i, $param := .OnCallArgs }}{{ if $i }}, {{ end }}{{ $param }}{{ end }}), Parent: _m}
}

{{end}}