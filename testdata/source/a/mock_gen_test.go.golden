// Code generated by mocktail; DO NOT EDIT.

package a

import (
	"testing"
	"time"

	"github.com/stretchr/testify/mock"
)

// piniaColadaMock mock of PiniaColada.
type piniaColadaMock struct{ mock.Mock }

// newPiniaColadaMock creates a new piniaColadaMock.
func newPiniaColadaMock(tb testing.TB) *piniaColadaMock {
	tb.Helper()

	m := &piniaColadaMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *piniaColadaMock) Coconut() {
	_m.Called()
}

func (_m *piniaColadaMock) OnCoconut() *piniaColadaCoconutCall {
	return &piniaColadaCoconutCall{Call: _m.Mock.On("Coconut"), Parent: _m}
}

func (_m *piniaColadaMock) OnCoconutRaw() *piniaColadaCoconutCall {
	return &piniaColadaCoconutCall{Call: _m.Mock.On("Coconut"), Parent: _m}
}

type piniaColadaCoconutCall struct {
	*mock.Call
	Parent *piniaColadaMock
}

func (_c *piniaColadaCoconutCall) Panic(msg string) *piniaColadaCoconutCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *piniaColadaCoconutCall) Once() *piniaColadaCoconutCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *piniaColadaCoconutCall) Twice() *piniaColadaCoconutCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *piniaColadaCoconutCall) Times(i int) *piniaColadaCoconutCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *piniaColadaCoconutCall) WaitUntil(w <-chan time.Time) *piniaColadaCoconutCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *piniaColadaCoconutCall) After(d time.Duration) *piniaColadaCoconutCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *piniaColadaCoconutCall) Run(fn func(args mock.Arguments)) *piniaColadaCoconutCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *piniaColadaCoconutCall) Maybe() *piniaColadaCoconutCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *piniaColadaCoconutCall) TypedRun(fn func()) *piniaColadaCoconutCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *piniaColadaCoconutCall) OnCoconut() *piniaColadaCoconutCall {
	return _c.Parent.OnCoconut()
}

func (_c *piniaColadaCoconutCall) OnPine(apple string) *piniaColadaPineCall {
	return _c.Parent.OnPine(apple)
}

func (_c *piniaColadaCoconutCall) OnRhum() *piniaColadaRhumCall {
	return _c.Parent.OnRhum()
}

func (_c *piniaColadaCoconutCall) OnCoconutRaw() *piniaColadaCoconutCall {
	return _c.Parent.OnCoconutRaw()
}

func (_c *piniaColadaCoconutCall) OnPineRaw(apple interface{}) *piniaColadaPineCall {
	return _c.Parent.OnPineRaw(apple)
}

func (_c *piniaColadaCoconutCall) OnRhumRaw() *piniaColadaRhumCall {
	return _c.Parent.OnRhumRaw()
}

func (_m *piniaColadaMock) Pine(apple string) {
	_m.Called(apple)
}

func (_m *piniaColadaMock) OnPine(apple string) *piniaColadaPineCall {
	return &piniaColadaPineCall{Call: _m.Mock.On("Pine", apple), Parent: _m}
}

func (_m *piniaColadaMock) OnPineRaw(apple interface{}) *piniaColadaPineCall {
	return &piniaColadaPineCall{Call: _m.Mock.On("Pine", apple), Parent: _m}
}

type piniaColadaPineCall struct {
	*mock.Call
	Parent *piniaColadaMock
}

func (_c *piniaColadaPineCall) Panic(msg string) *piniaColadaPineCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *piniaColadaPineCall) Once() *piniaColadaPineCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *piniaColadaPineCall) Twice() *piniaColadaPineCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *piniaColadaPineCall) Times(i int) *piniaColadaPineCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *piniaColadaPineCall) WaitUntil(w <-chan time.Time) *piniaColadaPineCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *piniaColadaPineCall) After(d time.Duration) *piniaColadaPineCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *piniaColadaPineCall) Run(fn func(args mock.Arguments)) *piniaColadaPineCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *piniaColadaPineCall) Maybe() *piniaColadaPineCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *piniaColadaPineCall) TypedRun(fn func(string)) *piniaColadaPineCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_apple := args.String(0)
		fn(_apple)
	})
	return _c
}

func (_c *piniaColadaPineCall) OnCoconut() *piniaColadaCoconutCall {
	return _c.Parent.OnCoconut()
}

func (_c *piniaColadaPineCall) OnPine(apple string) *piniaColadaPineCall {
	return _c.Parent.OnPine(apple)
}

func (_c *piniaColadaPineCall) OnRhum() *piniaColadaRhumCall {
	return _c.Parent.OnRhum()
}

func (_c *piniaColadaPineCall) OnCoconutRaw() *piniaColadaCoconutCall {
	return _c.Parent.OnCoconutRaw()
}

func (_c *piniaColadaPineCall) OnPineRaw(apple interface{}) *piniaColadaPineCall {
	return _c.Parent.OnPineRaw(apple)
}

func (_c *piniaColadaPineCall) OnRhumRaw() *piniaColadaRhumCall {
	return _c.Parent.OnRhumRaw()
}

func (_m *piniaColadaMock) Rhum() string {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() string); ok {
		return _rf()
	}

	_ra0 := _ret.String(0)

	return _ra0
}

func (_m *piniaColadaMock) OnRhum() *piniaColadaRhumCall {
	return &piniaColadaRhumCall{Call: _m.Mock.On("Rhum"), Parent: _m}
}

func (_m *piniaColadaMock) OnRhumRaw() *piniaColadaRhumCall {
	return &piniaColadaRhumCall{Call: _m.Mock.On("Rhum"), Parent: _m}
}

type piniaColadaRhumCall struct {
	*mock.Call
	Parent *piniaColadaMock
}

func (_c *piniaColadaRhumCall) Panic(msg string) *piniaColadaRhumCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *piniaColadaRhumCall) Once() *piniaColadaRhumCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *piniaColadaRhumCall) Twice() *piniaColadaRhumCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *piniaColadaRhumCall) Times(i int) *piniaColadaRhumCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *piniaColadaRhumCall) WaitUntil(w <-chan time.Time) *piniaColadaRhumCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *piniaColadaRhumCall) After(d time.Duration) *piniaColadaRhumCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *piniaColadaRhumCall) Run(fn func(args mock.Arguments)) *piniaColadaRhumCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *piniaColadaRhumCall) Maybe() *piniaColadaRhumCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *piniaColadaRhumCall) TypedReturns(a string) *piniaColadaRhumCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *piniaColadaRhumCall) ReturnsFn(fn func() string) *piniaColadaRhumCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *piniaColadaRhumCall) TypedRun(fn func()) *piniaColadaRhumCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *piniaColadaRhumCall) OnCoconut() *piniaColadaCoconutCall {
	return _c.Parent.OnCoconut()
}

func (_c *piniaColadaRhumCall) OnPine(apple string) *piniaColadaPineCall {
	return _c.Parent.OnPine(apple)
}

func (_c *piniaColadaRhumCall) OnRhum() *piniaColadaRhumCall {
	return _c.Parent.OnRhum()
}

func (_c *piniaColadaRhumCall) OnCoconutRaw() *piniaColadaCoconutCall {
	return _c.Parent.OnCoconutRaw()
}

func (_c *piniaColadaRhumCall) OnPineRaw(apple interface{}) *piniaColadaPineCall {
	return _c.Parent.OnPineRaw(apple)
}

func (_c *piniaColadaRhumCall) OnRhumRaw() *piniaColadaRhumCall {
	return _c.Parent.OnRhumRaw()
}
